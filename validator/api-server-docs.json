{"message":"Welcome to the API. See available endpoints below:","endpoints":[{"path":"/updateVotes","method":"POST","description":"Updates or registers votes for a given coldkey address. The coldkey must hold alpha tokens.","inputs":{"body":{"signature":"string (Polkadot/Substrate signature of the message)","message":"string (formatted as 'poolsStr|blockNumStr')","address":"string (coldkey address of the voter)"},"message_format_details":{"poolsStr":"string (formatted as 'poolAddress1,weight1;poolAddress2,weight2;...') - max 10 pools","blockNumStr":"string (current Bittensor block number)"}},"outputs":{"success":"boolean","message":"string (e.g., 'Votes updated')","pools":"Array<{ address: string, weight: number }> (normalized pools if successful)","error":"string (description of error if success is false)"}},{"path":"/claimAddress","method":"POST","description":"Claims an Ethereum address for a hotkey address. The hotkey must be registered in the subnet and hold alpha tokens.","inputs":{"body":{"signature":"string (Polkadot/Substrate signature of the message)","message":"string (formatted as 'ethSig|ethAddrPayload|hotkeyPayload|blockNumStr|ethSigner')","address":"string (hotkey address)"},"message_format_details":{"ethSig":"string (Ethereum signature of 'ethAddrPayload|hotkeyPayload|blockNumStr')","ethAddrPayload":"string (Ethereum address being claimed)","hotkeyPayload":"string (hotkey address performing the claim)","blockNumStr":"string (current Bittensor block number)","ethSigner":"string (Ethereum address that signed the ethMessage)"}},"outputs":{"success":"boolean","message":"string (e.g., 'Address mapping created' or 'Mapping already exists')","error":"string (description of error if success is false)"}},{"path":"/userVotes/:address","method":"GET","description":"Retrieves the votes for a specific coldkey address.","inputs":{"params":{"address":"string (coldkey address)"}},"outputs":{"success":"boolean","userVotes":"object (contains user's vote data) or null if no votes found","message":"string (e.g., 'No votes found')","error":"string (description of error if success is false)"}},{"path":"/allVotes","method":"GET","description":"Retrieves all stored user votes with token-based weight multipliers. Results are cached for 30 seconds.","inputs":"None","outputs":{"success":"boolean","votes":"Array<object> (list of all votes, each containing: coldkey address, pools, total_weight, block_number, alphaBalance, weightMultiplier)","totalAlphaTokens":"number (total alpha tokens held by all voters)","cached":"boolean (true if the response is from cache)","error":"string (description of error if success is false)"},"weight_calculation":{"single_voter":"If only one voter exists, they receive full weight (weightMultiplier = 1)","multiple_voters":"Weight multiplier is calculated as: voter's_alpha_tokens / total_alpha_tokens"}},{"path":"/allHolders","method":"GET","description":"Retrieves all token holders and their balances from Taostats. Results are cached and periodically refreshed.","inputs":"None","outputs":{"success":"boolean","holders":"object (mapping of coldkey address to balance)","cached":"boolean (always true as data is served from an in-memory cache)","error":"string (description of error if success is false)"}},{"path":"/allAddresses","method":"GET","description":"Retrieves all addresses associated with the token holders.","inputs":"None","outputs":{"success":"boolean","addresses":"Array<{ hotkeyAddress: string, ethereumAddress: string }> (linked addresses registered to subnet)","error":"string (description of error if success is false)"}},{"path":"/allMiners","method":"GET","description":"Retrieves all miners on the subnet along with their linked Ethereum addresses (if any).","inputs":"None","outputs":{"success":"boolean","miners":"Array<{ hotkeyAddress: string, ethereumAddress: string | null }> (all subnet miners with optional Ethereum addresses)","totalMiners":"number (total number of miners on the subnet)","linkedMiners":"number (number of miners with linked Ethereum addresses)","error":"string (description of error if success is false)"}}]}